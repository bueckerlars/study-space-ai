openapi: 3.0.0
info:
  title: StudyFlowAI API
  version: v1
  description: API für die StudyFlowAI Plattform zur Lernplanung und -unterstützung.

servers:
  - url: http://localhost:3000/api
    description: Lokaler Entwicklungsserver

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
        name:
          type: string
        username:
          type: string
        createdAt:
          type: string
          format: date-time
    AuthPayload:
      type: object
      properties:
        user:
          type: object
        token:
          type: string
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 6
        name:
          type: string
        username:
          type: string
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    Project:
      type: object
      required:
        - name
      properties:
        project_id:
          type: integer
          readOnly: true
        user_id:
          type: integer
        name:
          type: string
          description: The name of the project
        description:
          type: string
          description: Project description
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    File:
      type: object
      properties:
        file_id:
          type: string
        name:
          type: string
        project_id:
          type: integer
        user_id:
          type: integer
        path:
          type: string
        size:
          type: integer
        type:
          type: string
        url:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Source:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        source_file_id:
          type: string
        text_file_id:
          type: string
        summary_file_id:
          type: string

paths:
  # Auth Routes
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPayload'
        '400':
          description: Invalid input data
        '409':
          description: Email already exists
  
  /auth/login:
    post:
      summary: Login a user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPayload'
        '401':
          description: Invalid credentials
  
  /auth/refresh:
    post:
      summary: Refresh authentication token
      tags: [Authentication]
      responses:
        '200':
          description: New token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid or expired refresh token
  
  /auth/logout:
    post:
      summary: Logout a user
      tags: [Authentication]
      responses:
        '200':
          description: Logout successful
        '401':
          description: Not authenticated
  
  /auth/me:
    get:
      summary: Get current user profile
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated

  # Project Routes
  /projects:
    post:
      summary: Create a new project
      tags: [Projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    
    get:
      summary: Get all projects for the authenticated user
      tags: [Projects]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
        '500':
          description: Server error
  
  /projects/{id}:
    get:
      summary: Get a project by ID
      tags: [Projects]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Project ID
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user does not own this project
        '404':
          description: Project not found
        '500':
          description: Server error
    
    put:
      summary: Update a project
      tags: [Projects]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Updated project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user does not own this project
        '404':
          description: Project not found or no changes made
        '500':
          description: Server error
    
    delete:
      summary: Delete a project
      tags: [Projects]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Project ID
      responses:
        '204':
          description: Project successfully deleted
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user does not own this project
        '404':
          description: Project not found
        '500':
          description: Server error
  
  /projects/{id}/files:
    get:
      summary: Get files associated with a project
      tags: [Projects]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Project ID
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user does not own this project
        '404':
          description: Project not found
        '500':
          description: Server error
  
  /projects/{id}/sources:
    get:
      summary: Get sources associated with a project
      tags: [Projects]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Project ID
      responses:
        '200':
          description: List of sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user does not own this project
        '404':
          description: Project not found
        '500':
          description: Server error

  # File Routes
  /files/upload:
    post:
      summary: Upload a new file
      tags: [Files]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                user_id:
                  type: integer
                project_id:
                  type: integer
      responses:
        '201':
          description: File successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: Invalid request - Missing file or required fields
        '500':
          description: Server error
  
  /files/project/{projectId}:
    get:
      summary: Get all files for a specific project
      tags: [Files]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
          description: ID of the project to get files for
      responses:
        '200':
          description: List of files for the project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '400':
          description: Invalid project ID
        '500':
          description: Server error
  
  /files/user/{userId}:
    get:
      summary: Get all files for a specific user
      tags: [Files]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user to get files for
      responses:
        '200':
          description: List of files for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '400':
          description: Invalid user ID
        '500':
          description: Server error
  
  /files/{id}:
    get:
      summary: Get a file by ID
      tags: [Files]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the file to get
      responses:
        '200':
          description: File details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '404':
          description: File not found
        '500':
          description: Server error
    
    delete:
      summary: Delete a file
      tags: [Files]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the file to delete
      responses:
        '200':
          description: File successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File deleted successfully
        '404':
          description: File not found
        '500':
          description: Server error
  
  /files/{id}/content:
    get:
      summary: Get content of a file by ID
      tags: [Files]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the file to get content from
      responses:
        '200':
          description: File content
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: Content of the file
        '404':
          description: File not found
        '500':
          description: Server error
  
  /files/{id}/download:
    get:
      summary: Download a file by ID
      tags: [Files]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the file to download
      responses:
        '200':
          description: File download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
        '500':
          description: Server error

  # Source Routes
  /sources:
    post:
      summary: Create a new source
      tags: [Sources]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Source status
                  example: pending
                source_file_id:
                  type: string
                  description: ID of the source file
                text_file_id:
                  type: string
                  description: ID of the text file
                summary_file_id:
                  type: string
                  description: ID of the summary file
      responses:
        '201':
          description: Source successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Source'
        '500':
          description: Server error
    
    get:
      summary: Get all sources
      tags: [Sources]
      responses:
        '200':
          description: List of all sources
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 5
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
        '500':
          description: Server error
  
  /sources/{id}:
    get:
      summary: Get a source by ID
      tags: [Sources]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Source ID
      responses:
        '200':
          description: Source details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
        '500':
          description: Server error
    
    put:
      summary: Update a source
      tags: [Sources]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Source ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Source status
                source_file_id:
                  type: string
                  description: ID of the source file
                text_file_id:
                  type: string
                  description: ID of the text file
                summary_file_id:
                  type: string
                  description: ID of the summary file
      responses:
        '200':
          description: Source successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
        '500':
          description: Server error
    
    delete:
      summary: Delete a source
      tags: [Sources]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Source ID
      responses:
        '200':
          description: Source successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Source with ID 550e8400-e29b-41d4-a716-446655440000 successfully deleted
        '404':
          description: Source not found
        '500':
          description: Server error
  
  /sources/status/{status}:
    get:
      summary: Get sources by status
      tags: [Sources]
      parameters:
        - in: path
          name: status
          schema:
            type: string
          required: true
          description: Source status (e.g., pending, processed)
      responses:
        '200':
          description: List of sources with the specified status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
        '500':
          description: Server error
  
  /sources/{id}/status:
    patch:
      summary: Update a source status
      tags: [Sources]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Source ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  description: New status
                  example: processed
      responses:
        '200':
          description: Source status successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Source'
        '400':
          description: Status field is required
        '404':
          description: Source not found
        '500':
          description: Server error