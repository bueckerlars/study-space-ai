name: Build and Push Docker Images

on:
  push:
    tags:
      - 'v*'  # Wird ausgelöst, wenn ein Tag mit 'v' beginnt, z.B. v1.0.0

jobs:
  build-and-push:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      # Extrahiere die Tag-Version ohne 'v' (z.B. v1.0.0 -> 1.0.0)
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      # Extrahiere die vollständige Tag-Version (z.B. v1.0.0)
      - name: Extract full tag name
        id: get_full_tag
        run: echo "FULL_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Display version information
        run: |
          echo "Building with version: ${{ env.VERSION }}"
          echo "Full tag: ${{ env.FULL_TAG }}"
      
      # Frontend Service bauen und pushen
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-frontend:${{ env.FULL_TAG }}
          build-args: |
            VITE_API_URL=/api
      
      # Backend Service bauen und pushen
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-backend:${{ env.FULL_TAG }}
      
      # OCR Service bauen und pushen
      - name: Build and push ocr-service
        uses: docker/build-push-action@v5
        with:
          context: ./ocr-service
          file: ./ocr-service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-ocr-service:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-ocr-service:${{ env.FULL_TAG }}
      
      - name: Summary
        run: |
          echo "Successfully built and pushed the following images:"
          echo "- ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-frontend:latest (${{ env.FULL_TAG }})"
          echo "- ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-backend:latest (${{ env.FULL_TAG }})"
          echo "- ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-ocr-service:latest (${{ env.FULL_TAG }})"
      
      # Erstelle Release mit Links zu Docker Hub Images
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.FULL_TAG }}
          tag_name: ${{ env.FULL_TAG }}
          body: |
            ## Study Space AI ${{ env.FULL_TAG }}
            
            Docker Images für diese Version:
            
            ### Frontend
            - Docker Hub: [larsbuecker/study-space-frontend:${{ env.FULL_TAG }}](https://hub.docker.com/r/larsbuecker/study-space-frontend/tags?name=${{ env.FULL_TAG }})
            - `docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-frontend:${{ env.FULL_TAG }}`
            
            ### Backend
            - Docker Hub: [larsbuecker/study-space-backend:${{ env.FULL_TAG }}](https://hub.docker.com/r/larsbuecker/study-space-backend/tags?name=${{ env.FULL_TAG }})
            - `docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-backend:${{ env.FULL_TAG }}`
            
            ### OCR Service
            - Docker Hub: [larsbuecker/study-space-ocr-service:${{ env.FULL_TAG }}](https://hub.docker.com/r/larsbuecker/study-space-ocr-service/tags?name=${{ env.FULL_TAG }})
            - `docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-ocr-service:${{ env.FULL_TAG }}`
            
            ### Deployment
            
            Diese Version kann mit folgendem Befehl gestartet werden:

            ```yaml
            version: '3.8'

            services:
              frontend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-frontend:${{ env.FULL_TAG }}
                ports:
                  - "3000:80"
                depends_on:
                  - backend
                restart: unless-stopped
                networks:
                  - app-network

              backend:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-backend:${{ env.FULL_TAG }}
                ports:
                  - "5066:5066"
                environment:
                  - PORT=5066
                  - DB_USERNAME=postgres
                  - DB_PASSWORD=postgres
                  - DB_NAME=studyspace
                  - DB_HOST=db
                  - DB_DIALECT=postgres
                  - JWT_SECRET=your_jwt_secret
                  - LOG_LEVEL=INFO
                  - OLLAMA_API_URL=http://host.docker.internal:11434
                  - OCR_SERVICE_URL=http://ocr-service:8000
                  - CORS_ORIGIN=http://localhost:3000
                volumes:
                  - upload_files:/app/uploads
                depends_on:
                  - db
                restart: unless-stopped
                networks:
                  - app-network

              db:
                image: postgres:15-alpine
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=postgres
                  - POSTGRES_DB=studyspace
                ports:
                  - "5432:5432"
                volumes:
                  - db_data:/var/lib/postgresql/data
                networks:
                  - app-network

              ocr-service:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/study-space-ocr-service:${{ env.FULL_TAG }}
                ports:
                  - "8000:8000"
                environment:
                  - OCR_SERVICE_PORT=8000
                  - ALLOWED_ORIGINS=http://localhost:5066,http://backend:5066,http://localhost:3000
                volumes:
                  - ocr_output:/app/output
                restart: unless-stopped
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge

            volumes:
              db_data:
              upload_files:
              ocr_output:
            ```
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}